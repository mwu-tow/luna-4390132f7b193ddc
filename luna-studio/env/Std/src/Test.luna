import Std.Base
import Std.Time

def be exp act:
    def expLine:   "Expected: " + exp.toText
    def actLine:   "Actual: "   + act.toText
    def errMsg:    'Expected the values to be equal, but got:\n' + expLine + '\n' + actLine
    def negErrMsg: 'Expected the values not to be equal, but got:\n' + expLine + '\n' + actLine
    Assertion (exp == act) errMsg negErrMsg

def equal exp act:
    be exp act

def throwError act:
    errMsg = 'Expected the action to throw an error, but it did not.'
    negErrMsg = 'Expected the action not to throw an exception, but it did.'
    Assertion (runError act . isLeft) errMsg negErrMsg

def satisfy pred val:
    Assertion (pred val) "Expected the predicate to be True, but got False" "Expected the predicate to be False, but got True"


class Assertion:
    body                :: Bool
    errorMessage        :: Text
    negatedErrorMessage :: Text

    def run: case runError self.body of
        Left e:      throw ("Exception when evaluating assertion: " + e)
        Right False: throw self.errorMessage
        Right True:  None

    def not: Assertion self.body.not self.negatedErrorMessage self.errorMessage

class Test:
    def specify description assertion:
        msg = case runError assertion of
            Left e:
                tag  = '[FAILED] '
                newL = ':\n'
                reformatE = e . lines . each ('    ' +) . makeText '\n'
                tag + description + newL + reformatE
            Right v: description
        print msg

class TestSubject a:
    subject :: a

    def should    pred: pred self.subject . run
    def shouldNot pred: pred self.subject . not . run

class Bench:
    def run desc act:
        print ("Benchmarking: " + desc)
        t0 = Time.now
        a = act
        print a
        t1 = Time.now
        print (t1.diff t0)
