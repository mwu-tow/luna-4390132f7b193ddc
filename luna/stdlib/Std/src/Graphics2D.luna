import Std.Base
import Std.XML

class Point:
    x :: Real
    y :: Real

    def toJSON: [self.x, self.y] . toJSON

class ControlPoint:
    leftHandle  :: Maybe Point
    point       :: Point
    rightHandle :: Maybe Point

    def toJSON: JSON . empty . insert "leftHandle" self.leftHandle . insert "point" self.point . insert "rightHandle" self.rightHandle

def point           px py:         ControlPoint Nothing                (Point px py) Nothing
def lpoint  lpx lpy px py:         ControlPoint (Just (Point lpx lpy)) (Point px py) Nothing
def rpoint          px py rpx rpy: ControlPoint Nothing                (Point px py) (Just (Point rpx rpy))
def lrpoint lpx lpy px py rpx rpy: ControlPoint (Just (Point lpx lpy)) (Point px py) (Just (Point rpx rpy))

class AffineTransformation:
    a :: Real
    b :: Real
    c :: Real
    d :: Real
    tx :: Real
    ty :: Real

    def + that: case self of
        AffineTransformation a1 b1 c1 d1 tx1 ty1: case that of
            AffineTransformation a2 b2 c2 d2 tx2 ty2:
                a = a1.+ a2
                b = b1.+ b2
                c = c1.+ c2
                d = d1.+ d2
                tx = tx1.+ tx2
                ty = ty1.+ ty2
                AffineTransformation a b c d tx ty

    def * that: case self of
        AffineTransformation a1 b1 c1 d1 tx1 ty1: case that of
            AffineTransformation a2 b2 c2 d2 tx2 ty2:
                a = (a1.* a2) + (c1.* b2)
                b = (b1.* a2) + (d1.* b2)
                c = (a1.* c2) + (c1.* d2)
                d = (b1.* c2) + (d1.* d2)
                tx = tx1 + (c1.* ty2) + (a1.* tx2)
                ty = ty1 + (d1.* ty2) + (b1.* tx2)
                AffineTransformation a b c d tx ty

    def toList: case self of
        AffineTransformation a b c d tx ty: [a, b, c, d, tx, ty]

    def toJSON: self.toList.toJSON

def identityTrans:          AffineTransformation 1.0 0.0 0.0 1.0 0.0 0.0
def translationTrans tx ty: AffineTransformation 1.0 0.0 0.0 1.0 tx ty
def rotationTrans a:        AffineTransformation a.cos a.sin a.sin.negate a.cos 0.0 0.0

class Shape:
    Circle Real
    Rectangle Real Real
    Path (List ControlPoint)

    def toJSON: case self of
        Circle r: JSON . empty . insert "type" "circle" . insert "radius" r
        Rectangle w h: JSON . empty . insert "type" "rect" . insert "width" w . insert "height" h
        Path pts: JSON . empty . insert "type" "path" . insert "points" pts

    def toSVGDefs id: case self of
        Circle r: (id, XTag "circle" [("r", r.toText), ("fill", "black")] [], [])
        Rectangle w h: (id, XTag "rect" [("width", w.toText), ("height", h.toText), ("fill", "black"), ("x", w.negate/2.0 . toText), ("y", h.negate/2.0 . toText)] [], [])

class BooleanOperation:
    Union
    Difference
    Intersection

    def toJSON:
        tag = case self of
            Union: "union"
            Difference: "difference"
            Intersection: "intersection"
        tag.toJSON

class Boolean a:
    type :: BooleanOperation
    operands :: Tuple2 a a

    def toJSON:
        JSON . empty . insert "type" self.type . insert "operands" self.operands

    def toSVGDefs id: case self.type of
        Union:
            (leftId, leftShape, leftChildren)    = self.operands.first.toSVGDefs id
            (rightId, rightShape, rightChildren) = self.operands.second.toSVGDefs leftId
            useL = XTag "use" [("href", "#s" + leftId.toText)]  []
            useR = XTag "use" [("href", "#s" + rightId.toText)] []
            g    = XTag "g" [] [useL, useR]
            allChildren = [leftShape, rightShape] + (leftChildren + rightChildren)
            (rightId, g, allChildren)
        Intersection:
            (leftId, leftShape, leftChildren)    = self.operands.first.toSVGDefs  id
            (rightId, rightShape, rightChildren) = self.operands.second.toSVGDefs leftId
            maskId      = "m" + rightId.toText
            maskR       = XTag "mask" [("id", maskId)] [rightShape . setAttr "fill" "white"]
            useL        = XTag "use" [("href", "#s" + leftId.toText), ("mask", "url(#" + maskId + ")")] []
            allChildren = [leftShape, maskR] + (leftChildren + rightChildren)
            (rightId, useL, allChildren)
        Difference:
            (leftId, leftShape, leftChildren)    = self.operands.first.toSVGDefs  id
            (rightId, rightShape, rightChildren) = self.operands.second.toSVGDefs leftId
            maskId        = "m" + rightId.toText
            hugeRectangle = XTag "rect" [("width", "2000"), ("height", "2000"), ("x", "-1000"), ("y", "-1000"), ("fill", "white")] []
            mask          = XTag "mask" [("id", maskId)] [hugeRectangle, rightShape . setAttr "fill" "black"]
            useL          = XTag "use"  [("href", "#s" + leftId.toText), ("mask", "url(#" + maskId + ")")] []
            allChildren = [leftShape, mask] + (leftChildren + rightChildren)
            (rightId, useL, allChildren)

class GeoDef a:
    GeoEmpty
    GeoSimple Shape
    GeoCompound (Boolean a)

    def toJSON: case self of
        GeoEmpty: JSON . empty . insert "type" "empty"
        GeoSimple shape: shape.toJSON
        GeoCompound cmpd: cmpd.toJSON

    def toSVGDefs id: case self of
        GeoEmpty: (id, XTag "path" [("d", "")] [], [])
        GeoSimple shape: shape.toSVGDefs id
        GeoCompound b: b.toSVGDefs id

class Geo:
    transformation :: AffineTransformation
    definition     :: GeoDef Geo

    def toJSON:
        JSON . empty . insert "definition" self.definition . insert "transformation" self.transformation

    def transform t: case self of
        Geo tt d:
            newT = t * tt
            Geo newT d

    def translate tx ty: self.transform (translationTrans tx ty)
    def rotate alpha: self.transform (rotationTrans (alpha * pi / 180.0))

    def + that: Geo identityTrans (GeoCompound (Boolean Union        (self, that)))
    def - that: Geo identityTrans (GeoCompound (Boolean Difference   (self, that)))
    def * that: Geo identityTrans (GeoCompound (Boolean Intersection (self, that)))

    def toSVGDefs id:
        (lastUsedId, shape, childDefs) = self.definition.toSVGDefs id
        newId = lastUsedId + 1
        withTrans = shape.setAttr 'transform' ('matrix(' + self.transformation.toList.makeText ',' + ')')
        withId = withTrans.setAttr 'id' ('s' + newId.toText)
        (newId, withId, childDefs)

    def toSVG width height:
        (_, topDef, childDefs) = self.toSVGDefs 0
        defs = XTag "defs" [] childDefs
        viewBox = [width.negate / 2.0, height.negate / 2.0, width, height].makeText ' '
        svg = XTag "svg" [("width", width.toText), ("height", height.toText), ("viewBox", viewBox)] [defs, topDef]
        svg


def circle r:      Geo identityTrans (GeoSimple (Circle r))
def rectangle x y: Geo identityTrans (GeoSimple (Rectangle x y))
def path pts:      Geo identityTrans (GeoSimple (Path pts))
def emptyGeo:      Geo identityTrans GeoEmpty
